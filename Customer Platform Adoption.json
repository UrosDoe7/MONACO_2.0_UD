{"version":18,"variables":[{"key":"Tenant","type":"query","visible":true,"input":"fetch events\n  | filter dt.system.bucket == \"strato_ui_events\" and isNotNull(browser.user_agent)\n  and dt.rum.user_type == \"real user\" and bhv.license.type == \"paying\"\n  | fields `bhv.tenant.uuid`\n  | dedup `bhv.tenant.uuid`\n  | limit 9999","multiple":true,"version":1}],"tiles":{"0":{"title":"Users using 2nd vs 3rd gen (users using both will be counted 2x)","type":"data","query":"fetch logs, scanLimitGBytes:-1\n\n// filter for what's needed\n| filter dt.system.bucket == \"custom_sen_low_frontend_adoptiondata_ui_logs\" or dt.system.bucket == \"custom_sen_low_frontend_clientlogger_ui_logs\"\n| filterOut log.source == \"/media/datastore/server-data/log/Server_Debug.#.#.log\"\n// end filter for what's needed\n\n//parse content for data\n| parse content, \"LD? 'server.server.data.tenantData.serverLog.feature.ui.analytics.0.0.log:' SPACE LD '{}], {\\\"log\\\"=>\\\"' LD:message '\\\"}]'\"\n| parse content, \"'Server.0.0.log'? SPACE? JSON?:log_message SPACE? 'Server.0.0.log' SPACE JSON:real_message\"\n| fieldsAdd message = if(isNotNull(message),then:message,else:if(isNotNull(real_message[message]),then:real_message[message],else:content))\n| parse message, \"DATA? ('App opened (hypothetical)'|'App opened ')? LD? JSON:data LD?\"\n| filter isNotNull(data) and toString(data) != toString(record()) \n| fieldsRemove \"data.*\"\n| fieldsFlatten data\n| fieldsAdd \"data.*\"\n| fieldsAdd data.account_name=if(isNotNull(data.accountName),data.accountName,else:data.account_name)\n| fieldsAdd data.account_id=if(isNotNull(data.accountId),data.accountId,else:data.account_id)\n// end parse content for data\n\n| fields timestamp, content, data.gen, data.app, data.user, data.environment\n\n//---------FILL IN TENANT HERE------------//\n//| filter data.environment == $TenantID\n| filter  in(data.environment, {$Tenant})\n\n// use this line if you have more tenants: | filter in(data.environment, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n\n\n| summarize users = countDistinct(data.user), by:{data.gen}\n","visualization":"pieChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"data.gen","valueAxis":"users","categoryAxisLabel":"data.gen","valueAxisLabel":"users","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"error","prefixIcon":"","recordField":"error","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"data.gen\"]":264.84375,"[\"users\"]":166.203125},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"users"},"displayedFields":["data.gen"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"users","rangeAxis":""}],"variant":"single","displayedFields":["data.gen"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"unitsOverrides":[{"identifier":"users","unitCategory":"unspecified","baseUnit":"none","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1723670972924}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"1":{"title":"Daily App usage (dashboards, notebooks & workflows)","type":"data","query":"fetch logs, scanLimitGBytes:-1\n\n// filter for what's needed\n| filter dt.system.bucket == \"custom_sen_low_frontend_adoptiondata_ui_logs\" or dt.system.bucket == \"custom_sen_low_frontend_clientlogger_ui_logs\"\n| filterOut log.source == \"/media/datastore/server-data/log/Server_Debug.#.#.log\"\n// end filter for what's needed\n\n//parse content for data\n| parse content, \"LD? 'server.server.data.tenantData.serverLog.feature.ui.analytics.0.0.log:' SPACE LD '{}], {\\\"log\\\"=>\\\"' LD:message '\\\"}]'\"\n| parse content, \"'Server.0.0.log'? SPACE? JSON?:log_message SPACE? 'Server.0.0.log' SPACE JSON:real_message\"\n| fieldsAdd message = if(isNotNull(message),then:message,else:if(isNotNull(real_message[message]),then:real_message[message],else:content))\n| parse message, \"DATA? ('App opened (hypothetical)'|'App opened ')? LD? JSON:data LD?\"\n| filter isNotNull(data) and toString(data) != toString(record()) \n| fieldsRemove \"data.*\"\n| fieldsFlatten data\n| fieldsAdd \"data.*\"\n| fieldsAdd data.account_name=if(isNotNull(data.accountName),data.accountName,else:data.account_name)\n| fieldsAdd data.account_id=if(isNotNull(data.accountId),data.accountId,else:data.account_id)\n// end parse content for data\n\n| fields timestamp, data.app, data.user, data.environment, data.gen, data.user_type, data.dps, data.license, data.account_id, data.account_name, content\n| filter data.gen == \"3\"\n\n//---------FILL IN TENANT HERE------------//\n//| filter data.environment == $TenantID\n| filter  in(data.environment, {$Tenant})\n\n// use this line if you have more tenants: | filter in(data.environment, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n\n| filter in(data.app, {\"dynatrace.dashboards\", \"dynatrace.notebooks\", \"dynatrace.automations\"})\n\n| summarize countDistinct(data.user), by: {bin(timestamp, 1d), data.app}\n","visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"data.app","valueAxis":"countDistinct(data.user)","categoryAxisLabel":"data.app","valueAxisLabel":"countDistinct(data.user)","tooltipVariant":"single"},"fieldMapping":{"timestamp":"bin(timestamp, 1d)","leftAxisValues":["countDistinct(data.user)"],"leftAxisDimensions":["data.app"]},"hiddenLegendFields":[],"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"timestamp","prefixIcon":"","recordField":"timestamp","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"countDistinct(data.user)"},"displayedFields":["data.app"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(data.user)","rangeAxis":""}],"variant":"single","displayedFields":["data.app"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"2":{"title":"Users using dashboards, notebooks and workflows","type":"data","query":"fetch logs, scanLimitGBytes:-1\n\n// filter for what's needed\n| filter dt.system.bucket == \"custom_sen_low_frontend_adoptiondata_ui_logs\" or dt.system.bucket == \"custom_sen_low_frontend_clientlogger_ui_logs\"\n| filterOut log.source == \"/media/datastore/server-data/log/Server_Debug.#.#.log\"\n// end filter for what's needed\n\n//parse content for data\n| parse content, \"LD? 'server.server.data.tenantData.serverLog.feature.ui.analytics.0.0.log:' SPACE LD '{}], {\\\"log\\\"=>\\\"' LD:message '\\\"}]'\"\n| parse content, \"'Server.0.0.log'? SPACE? JSON?:log_message SPACE? 'Server.0.0.log' SPACE JSON:real_message\"\n| fieldsAdd message = if(isNotNull(message),then:message,else:if(isNotNull(real_message[message]),then:real_message[message],else:content))\n| parse message, \"DATA? ('App opened (hypothetical)'|'App opened ')? LD? JSON:data LD?\"\n| filter isNotNull(data) and toString(data) != toString(record()) \n| fieldsRemove \"data.*\"\n| fieldsFlatten data\n| fieldsAdd \"data.*\"\n| fieldsAdd data.account_name=if(isNotNull(data.accountName),data.accountName,else:data.account_name)\n| fieldsAdd data.account_id=if(isNotNull(data.accountId),data.accountId,else:data.account_id)\n// end parse content for data\n\n| fields timestamp, content, data.gen, data.app, data.user, data.environment\n\n\n//---------FILL IN TENANT HERE------------//\n//| filter data.environment == $TenantID\n| filter  in(data.environment, {$Tenant})\n\n// use this line if you have more tenants: | filter in(data.environment, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n\n\n| filter  data.app==\"dynatrace.dashboards\" or data.app==\"dynatrace.notebooks\" or data.app==\"dynatrace.automations\"\n\n| summarize usedapps=collectDistinct(data.app),by:{data.user} //which app does a user use?\n| summarize total_app_platform_users = countIf(arraySize(usedapps)>=1),\n            one_app = countIf(arraySize(usedapps)==1),\n            two_apps = countIf(arraySize(usedapps)==2),\n            all_three_apps = countIf(arraySize(usedapps)==3), \n            \n            dashboards = countIf(in(usedapps,\"dynatrace.dashboards\")),\n            notebooks = countIf(in(usedapps,\"dynatrace.notebooks\")),\n            workflows = countIf(in(usedapps,\"dynatrace.automations\"))\n","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"total_app_platform_users,one_app,two_apps,all_three_apps,dashboards,notebooks,workflows","valueAxisLabel":"total_app_platform_users,one_app,two_apps,all_three_apps,dashboards,notebooks,workflows","categoryAxis":["total_app_platform_users","one_app","two_apps","all_three_apps","dashboards","notebooks","workflows"],"valueAxis":["total_app_platform_users","one_app","two_apps","all_three_apps","dashboards","notebooks","workflows"],"tooltipVariant":"single"},"hiddenLegendFields":[],"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"timestamp","prefixIcon":"","recordField":"timestamp","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"total_app_platform_users\"]":221.21875},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"total_app_platform_users"},"displayedFields":[null],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"total_app_platform_users","rangeAxis":""},{"valueAxis":"one_app","rangeAxis":""},{"valueAxis":"two_apps","rangeAxis":""},{"valueAxis":"all_three_apps","rangeAxis":""},{"valueAxis":"dashboards","rangeAxis":""},{"valueAxis":"notebooks","rangeAxis":""},{"valueAxis":"workflows","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"5":{"title":"DQL executions by datatype","type":"data","query":"//queries\nfetch logs, scanLimitGBytes:-1\n| filter dt.system.bucket==\"custom_sen_low_query_frontend_dql_logs\"\n| fields timestamp, content, dt.entity.host\n| parse content ,\"TIMESTAMP('yyyy-MM-dd HH:mm:ss.S'):ts LD:level LD:pre 'JSON:'JSON:query\"\n| filterOut isNull(query)\n| fields timestamp,content, query,user=query[user], qstring = query[dql], tenant = query[tenant], state = query[state], app=query[client.application_context], source=query[client.source], pattern = query[dql_commands], duration = query[duration_ms],waittime=query[wait_time], parsetime=query[exec_states_ms][parsing], segments = query[segments_scanned],scanned_bytes=query[scanned_bytes], start=query[analysis_timeframe_start], end=query[analysis_timeframe_end]\n| fieldsAdd query_duration_h = (end-start)*1.0/3600000, queue_time = query[qgw][query_queue_time], dur=query[duration_ms], query, buckets = query[buckets]\n| fieldsAdd datatype = coalesce(if(contains(pattern,\"timeseries\"),\"metric\"),\n            if(contains(pattern,\"fetch logs\"),\"logs\"),\n            if(contains(pattern,\"fetch spans\"),\"spans\"),\n            if(contains(pattern,\"fetch bizevents\"),\"bizevents\"),\n            if(contains(pattern,\"fetch events\"),\"events\"),\n            if(contains(pattern,\"fetch dt.davis.problems\"),\"problems\")\n)\n\n//---------FILL IN TENANT HERE------------//\n//| filter tenant == $TenantID\n| filter  in(tenant, {$Tenant})\n\n// use this line if you have more tenants: | filter in(tenant, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n| filter isNotNull(datatype)\n| summarize executions=count(), by:{datatype}\n| sort executions desc","visualization":"pieChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":"datatype","valueAxis":"executions","categoryAxisLabel":"datatype","valueAxisLabel":"executions","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"alignment":"center","label":"error","recordField":"error","autoscale":true,"trend":{"trendType":"auto","isVisible":true},"showLabel":true},"table":{"hiddenColumns":[],"lineWrapIds":[],"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","dataMappings":{"value":"executions"},"legend":"auto","displayedFields":["datatype"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"executions","rangeAxis":""}],"variant":"single","displayedFields":["datatype"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"6":{"title":"Datatype query executions per app","type":"data","query":"//queries\nfetch logs, scanLimitGBytes:-1\n| filter dt.system.bucket==\"custom_sen_low_query_frontend_dql_logs\"\n| fields timestamp, content, dt.entity.host\n| parse content ,\"TIMESTAMP('yyyy-MM-dd HH:mm:ss.S'):ts LD:level LD:pre 'JSON:'JSON:query\"\n| filterOut isNull(query)\n| fields timestamp,content, query,user=query[user], qstring = query[dql], tenant = query[tenant], state = query[state], app=query[client.application_context], source=query[client.source], pattern = query[dql_commands], duration = query[duration_ms],waittime=query[wait_time], parsetime=query[exec_states_ms][parsing], segments = query[segments_scanned],scanned_bytes=query[scanned_bytes], start=query[analysis_timeframe_start], end=query[analysis_timeframe_end]\n| fieldsAdd query_duration_h = (end-start)*1.0/3600000, queue_time = query[qgw][query_queue_time], dur=query[duration_ms], query, buckets = query[buckets]\n| fieldsAdd datatype = coalesce(if(contains(pattern,\"timeseries\"),\"metric\"),\n            if(contains(pattern,\"fetch logs\"),\"logs\"),\n            if(contains(pattern,\"fetch spans\"),\"spans\"),\n            if(contains(pattern,\"fetch bizevents\"),\"bizevents\"),\n            if(contains(pattern,\"fetch events\"),\"events\"),\n            if(contains(pattern,\"fetch dt.davis.problems\"),\"problems\")\n)\n\n//---------FILL IN TENANT HERE------------//\n//| filter tenant == $TenantID\n| filter  in(tenant, {$Tenant})\n\n// use this line if you have more tenants: | filter in(tenant, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n| filter isNotNull(datatype)\n| filter isNotNull(app)\n\n| summarize executions=count(), by:{app, datatype}\n| sort executions desc","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":"app","valueAxis":"executions","categoryAxisLabel":"app","valueAxisLabel":"executions","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"alignment":"center","label":"error","recordField":"error","autoscale":true,"trend":{"trendType":"auto","isVisible":true},"showLabel":true},"table":{"hiddenColumns":[],"lineWrapIds":[],"sortBy":{"columnId":"[\"datatype\"]","direction":"ascending"},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","dataMappings":{"value":"executions"},"legend":"auto","displayedFields":["app"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"executions","rangeAxis":""}],"variant":"single","displayedFields":["app","datatype"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"7":{"title":"AppEngine App Usage","type":"data","query":"fetch events\n  | filter dt.system.bucket == \"strato_ui_events\"\n  | filter event.type==\"behavioral\" AND in (bhv.schema_version, {\"0.2\"})\n  | filterOut matchesPhrase(`bhv.app.id`,\".e2e\") OR matchesPhrase(`bhv.app.id`,\".preview\") OR matchesPhrase(`bhv.app.id`,\".prpreview\") OR matchesPhrase(`bhv.app.id`,\"dt.missing.app.id\")\n  | parse bhv.user.id, \"LD'@'LD:domainId\"\n  | fieldsAdd origin.id = if(contains(domainId, \"dynatrace\") OR domainId == \"ruxitlabs.com\", \"Internal\",else:\"External\")\n  | filter  `origin.id` != \"Internal\"\n  | fieldsAdd bhv.platform = if(bhv.platform == \"2g_angular\",\"Classic Angular\",else:(if(bhv.platform == \"2g_GWT\",\"Classic GWT\",else:(if(bhv.platform == \"2gw_angular\",\"Wrapped Angular\",else:(if(bhv.platform == \"2gw_gwt\",\"Wrapped GWT\",else:\"AppEngine\")))))))\n  | filter  `bhv.platform` == \"AppEngine\"\n  //| filter  `bhv.tenant.uuid` == $TenantID\n  | filter  in(`bhv.tenant.uuid`, {$Tenant})\n  | fieldsAdd user = coalesce(bhv.user.id, dt.rum.instance.id)\n  | summarize {\n        //Platform = arrayFirst(collectDistinct(bhv.platform)),\n        //Pages = countDistinct(bhv.page.group),\n        Users= countDistinct(user),\n        Sessions = countDistinct(dt.rum.session.id),\n        Interactions = countIf(bhv.type!= \"view\"),\n        AppNames = collectDistinct(bhv.app.name)\n        \n        //,`Util Version` = collectDistinct(bhv.util_version)\n        }, by: {App = bhv.app.id}\n  | sort Users desc","visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"App","categoryAxisLabel":"App","valueAxis":"Users","valueAxisLabel":"Users","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"App","prefixIcon":"","recordField":"App","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"colorThresholdTarget":"value","columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Users"},"displayedFields":["App"]},"histogram":{"dataMappings":[{"valueAxis":"Users","rangeAxis":""},{"valueAxis":"Sessions","rangeAxis":""},{"valueAxis":"Interactions","rangeAxis":""}],"variant":"single","displayedFields":["App"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-30d","to":"now()"},"tileTimeframeEnabled":false}},"9":{"title":"New Platform - Active Users Daily","type":"data","query":"fetch events\n  | filter dt.system.bucket == \"strato_ui_events\"\n  | filter event.type==\"behavioral\" AND in (bhv.schema_version, {\"0.2\"})\n  | filterOut matchesPhrase(`bhv.app.id`,\".e2e\") OR matchesPhrase(`bhv.app.id`,\".preview\") OR matchesPhrase(`bhv.app.id`,\".prpreview\") OR matchesPhrase(`bhv.app.id`,\"dt.missing.app.id\")\n  | parse bhv.user.id, \"LD'@'LD:domainId\"\n  | fieldsAdd origin.id = if(contains(domainId, \"dynatrace\") OR domainId == \"ruxitlabs.com\", \"Internal\",else:\"External\")\n  | filter  `origin.id` != \"Internal\"\n  | fieldsAdd bhv.platform = if(bhv.platform == \"2g_angular\",\"Classic Angular\",else:(if(bhv.platform == \"2g_GWT\",\"Classic GWT\",else:(if(bhv.platform == \"2gw_angular\",\"Wrapped Angular\",else:(if(bhv.platform == \"2gw_gwt\",\"Wrapped GWT\",else:\"AppEngine\")))))))\n  | filter  `bhv.platform` == \"AppEngine\"\n  //| filter  `bhv.tenant.uuid` == $TenantID\n  | filter  in(`bhv.tenant.uuid`, {$Tenant})\n  | fieldsAdd user = coalesce(bhv.user.id, dt.rum.instance.id)\n  | filter isNotNull(user)\n  | summarize users = countDistinct(user), by: {bucket = bin(timestamp, 1d)}\n  | makeTimeseries series: {Users = sum(users)}, time: bucket, interval: 1d","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"hiddenLegendFields":["interval"],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["Users"],"leftAxisDimensions":[]},"categoricalBarChartSettings":{"categoryAxis":["interval"],"categoryAxisLabel":"interval","valueAxis":["interval"],"valueAxisLabel":"interval","tooltipVariant":"single"},"valueRepresentation":"absolute","truncationMode":"middle","xAxisLabel":"timeframe","xAxisIsLabelVisible":false,"leftYAxisSettings":{}},"singleValue":{"showLabel":true,"prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"columnTypeOverrides":[{"fields":["Users"],"value":"sparkline","id":1736886748278}]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"interval"},"displayedFields":[null]},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"10":{"title":"New Platform - Active Users Monthly","type":"data","query":"fetch events\n  | filter event.type==\"behavioral\" AND in (bhv.schema_version, {\"0.2\"})\n  | filterOut matchesPhrase(`bhv.app.id`,\".e2e\") OR matchesPhrase(`bhv.app.id`,\".preview\") OR matchesPhrase(`bhv.app.id`,\".prpreview\") OR matchesPhrase(`bhv.app.id`,\"dt.missing.app.id\")\n  | parse bhv.user.id, \"LD'@'LD:domainId\"\n  | fieldsAdd origin.id = if(contains(domainId, \"dynatrace\") OR domainId == \"ruxitlabs.com\", \"Internal\",else:\"External\")\n  | filter  `origin.id` != \"Internal\"\n  | fieldsAdd bhv.platform = if(bhv.platform == \"2g_angular\",\"Classic Angular\",else:(if(bhv.platform == \"2g_GWT\",\"Classic GWT\",else:(if(bhv.platform == \"2gw_angular\",\"Wrapped Angular\",else:(if(bhv.platform == \"2gw_gwt\",\"Wrapped GWT\",else:\"AppEngine\")))))))\n  | filter  `bhv.platform` == \"AppEngine\"\n  //| filter  `bhv.tenant.uuid` == $TenantID\n  | filter  in(`bhv.tenant.uuid`, {$Tenant})\n  | fieldsAdd user = coalesce(bhv.user.id, dt.rum.instance.id)\n  | filter isNotNull(user)\n  | summarize users = countDistinct(user), by: {bucket = bin(timestamp, 30d)}\n  | makeTimeseries series: {Users = sum(users)}, time: bucket, interval: 30d","visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"hiddenLegendFields":["interval"],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["Users"],"leftAxisDimensions":[]},"categoricalBarChartSettings":{"categoryAxis":["interval"],"categoryAxisLabel":"interval","valueAxis":["interval"],"valueAxisLabel":"interval","tooltipVariant":"single"},"valueRepresentation":"absolute","truncationMode":"middle","xAxisLabel":"timeframe","xAxisIsLabelVisible":false,"leftYAxisSettings":{}},"singleValue":{"showLabel":true,"prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"columnTypeOverrides":[{"fields":["Users"],"value":"sparkline","id":1736886760876}]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"interval"},"displayedFields":[null]},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":800,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-90d","to":"now()"},"tileTimeframeEnabled":true}},"12":{"title":"New Platform - Users per Application","type":"data","query":"fetch events\n  | filter dt.system.bucket == \"strato_ui_events\"\n  | filter event.type==\"behavioral\" AND in (bhv.schema_version, {\"0.2\"})\n  | filterOut matchesPhrase(`bhv.app.id`,\".e2e\") OR matchesPhrase(`bhv.app.id`,\".preview\") OR matchesPhrase(`bhv.app.id`,\".prpreview\") OR matchesPhrase(`bhv.app.id`,\"dt.missing.app.id\")\n  | parse bhv.user.id, \"LD'@'LD:domainId\"\n  | fieldsAdd origin.id = if(contains(domainId, \"dynatrace\") OR domainId == \"ruxitlabs.com\", \"Internal\",else:\"External\")\n  | filter  `origin.id` != \"Internal\"\n  | fieldsAdd bhv.platform = if(bhv.platform == \"2g_angular\",\"Classic Angular\",else:(if(bhv.platform == \"2g_GWT\",\"Classic GWT\",else:(if(bhv.platform == \"2gw_angular\",\"Wrapped Angular\",else:(if(bhv.platform == \"2gw_gwt\",\"Wrapped GWT\",else:\"AppEngine\")))))))\n  | filter  `bhv.platform` == \"AppEngine\"\n    //| filter  `bhv.tenant.uuid` == $TenantID\n  | filter  in(`bhv.tenant.uuid`, {$Tenant})\n  | fieldsAdd user = coalesce(bhv.user.id, dt.rum.instance.id)\n  | filter isNotNull(bhv.app.name) AND isNotNull(bhv.app.id)\n  | summarize {Users = countDistinct(user)}, by: {bhv.app.name, bhv.app.id}\n  | sort Users, direction:\"descending\"\n  | limit 30","visualization":"categoricalBarChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"bhv.app.name","categoryAxisLabel":"bhv.app.name","valueAxis":"Users","valueAxisLabel":"Users","layout":"horizontal","tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"bhv.app.name","prefixIcon":"","recordField":"bhv.app.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Users"},"displayedFields":["bhv.app.name"]},"histogram":{"dataMappings":[{"valueAxis":"Users","rangeAxis":""}],"variant":"single","displayedFields":["bhv.app.name","bhv.app.id"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-30d","to":"now()"},"tileTimeframeEnabled":false}},"13":{"title":"","type":"data","query":"fetch events\n| filter dt.system.bucket == \"strato_ui_events\"\n| filter in(bhv.app.id, {\"dynatrace.notebooks\"})\n\n| parse bhv.user.id, \"LD'@'LD:domainId\"\n| fieldsAdd origin.id = if(contains(domainId, \"dynatrace\") OR domainId == \"ruxitlabs.com\", \"Internal\",else:\"External\")\n| filter  `origin.id` != \"Internal\"\n\n//---------FILL IN TENANT HERE------------//\n//| filter  `bhv.tenant.uuid` == $TenantID\n| filter  in(`bhv.tenant.uuid`, {$Tenant})\n\n// use this line if you have more tenants: | filter in(bhv.tenant.uuid, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n| fields  bhv.app.name, bhv.page.uri\n\n| parse `bhv.page.uri`, \"\"\"LD \"notebook/\" LD:notebook_id ('#'|EOF)\"\"\"\n\n\n| fields  app = bhv.app.name, bhv.page.uri, notebook_id\n\n//Active is classified as any Notebook any user has accessed or worked on\n| summarize active_notebooks=countDistinct(notebook_id)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"active_notebooks","valueAxisLabel":"active_notebooks","categoryAxis":["active_notebooks"],"valueAxis":["active_notebooks"],"tooltipVariant":"single"},"hiddenLegendFields":[],"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"active_notebooks","prefixIcon":"","recordField":"active_notebooks","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"bhv.page.uri\"]":937,"[\"active_notebooks\"]":240},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"active_notebooks"},"displayedFields":[null],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"active_notebooks","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"15":{"title":"","type":"data","query":"fetch events\n| filter dt.system.bucket == \"strato_ui_events\"\n| filter in(bhv.app.id, {\"dynatrace.dashboards\"})\n\n| parse bhv.user.id, \"LD'@'LD:domainId\"\n| fieldsAdd origin.id = if(contains(domainId, \"dynatrace\") OR domainId == \"ruxitlabs.com\", \"Internal\",else:\"External\")\n| filter  `origin.id` != \"Internal\"\n\n//---------FILL IN TENANT HERE------------//\n  //| filter  `bhv.tenant.uuid` == $TenantID\n| filter  in(`bhv.tenant.uuid`, {$Tenant})\n\n// use this line if you have more tenants: | filter in(bhv.tenant.uuid, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n| fields  bhv.app.name, bhv.page.uri\n\n| parse `bhv.page.uri`, \"\"\"LD \"dashboard/\" LD:dashboard_id ('#'|EOF)\"\"\"\n\n\n| fields  app = bhv.app.name, bhv.page.uri, dashboard_id\n\n//Active is classified as any Dashboard any user has accessed or worked on\n| summarize active_dashboards=countDistinct(dashboard_id)","visualization":"singleValue","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"active_dashboards","valueAxisLabel":"active_dashboards","categoryAxis":["active_dashboards"],"valueAxis":["active_dashboards"],"tooltipVariant":"single"},"hiddenLegendFields":[],"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"active_dashboards","prefixIcon":"","recordField":"active_dashboards","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"bhv.page.uri\"]":937,"[\"active_notebooks\"]":240},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"active_dashboards"},"displayedFields":[null],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"active_dashboards","rangeAxis":""}],"variant":"single","displayedFields":[]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"16":{"title":"General Platform Usage (classic & new)","type":"data","query":"fetch events\n  | filter dt.system.bucket == \"strato_ui_events\"\n  | filter event.type==\"behavioral\" AND in (bhv.schema_version, {\"0.2\"})\n  | filterOut matchesPhrase(`bhv.app.id`,\".e2e\") OR matchesPhrase(`bhv.app.id`,\".preview\") OR matchesPhrase(`bhv.app.id`,\".prpreview\") OR matchesPhrase(`bhv.app.id`,\"dt.missing.app.id\")\n  | parse bhv.user.id, \"LD'@'LD:domainId\"\n  | fieldsAdd origin.id = if(contains(domainId, \"dynatrace\") OR domainId == \"ruxitlabs.com\", \"Internal\",else:\"External\")\n  | filter  `origin.id` != \"Internal\"\n  //| filter  `bhv.tenant.uuid` == $TenantID\n  | filter  in(`bhv.tenant.uuid`, {$Tenant})\n  | fieldsAdd user = coalesce(bhv.user.id, dt.rum.instance.id)\n  | filter isNotNull(bhv.app.name) AND isNotNull(bhv.app.id)\n  | summarize {Users = countDistinct(user)}, by: {bhv.app.name, bhv.app.id}\n  | sort Users, direction:\"descending\"\n  | limit 30","visualization":"categoricalBarChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"bhv.app.name","categoryAxisLabel":"bhv.app.name","valueAxis":"Users","valueAxisLabel":"Users","layout":"horizontal","isCategoryLabelVisible":true,"isValueLabelVisible":true,"tooltipVariant":"single"},"truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"bhv.app.name","prefixIcon":"","recordField":"bhv.app.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value","trend":{"trendType":"auto","isVisible":true}},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"Users"},"displayedFields":["bhv.app.name"]},"histogram":{"dataMappings":[{"valueAxis":"Users","rangeAxis":""}],"variant":"single","displayedFields":["bhv.app.name","bhv.app.id"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"now()-7d","to":"now()"},"tileTimeframeEnabled":false}}},"layouts":{"0":{"x":0,"y":0,"w":7,"h":8},"1":{"x":7,"y":4,"w":16,"h":4},"2":{"x":7,"y":2,"w":16,"h":2},"5":{"x":0,"y":21,"w":10,"h":7},"6":{"x":10,"y":21,"w":13,"h":7},"7":{"x":0,"y":8,"w":12,"h":7},"9":{"x":0,"y":15,"w":12,"h":6},"10":{"x":12,"y":15,"w":11,"h":6},"12":{"x":12,"y":8,"w":11,"h":7},"13":{"x":7,"y":0,"w":8,"h":2},"15":{"x":15,"y":0,"w":8,"h":2},"16":{"x":0,"y":28,"w":23,"h":10}},"settings":{},"importedWithCode":false}