{"version":15,"variables":[{"key":"TenantID","type":"text","visible":true}],"tiles":{"0":{"type":"data","title":"Users using 2nd gen vs. 3rd gen (users using both will be counted twice)","query":"fetch logs, scanLimitGBytes:-1\n\n// filter for what's needed\n| filter dt.system.bucket == \"custom_sen_low_frontend_adoptiondata_ui_logs\" or dt.system.bucket == \"custom_sen_low_frontend_clientlogger_ui_logs\"\n| filterOut log.source == \"/media/datastore/server-data/log/Server_Debug.#.#.log\"\n// end filter for what's needed\n\n//parse content for data\n| parse content, \"LD? 'server.server.data.tenantData.serverLog.feature.ui.analytics.0.0.log:' SPACE LD '{}], {\\\"log\\\"=>\\\"' LD:message '\\\"}]'\"\n| parse content, \"'Server.0.0.log'? SPACE? JSON?:log_message SPACE? 'Server.0.0.log' SPACE JSON:real_message\"\n| fieldsAdd message = if(isNotNull(message),then:message,else:if(isNotNull(real_message[message]),then:real_message[message],else:content))\n| parse message, \"DATA? ('App opened (hypothetical)'|'App opened ')? LD? JSON:data LD?\"\n| filter isNotNull(data) and toString(data) != toString(record()) \n| fieldsRemove \"data.*\"\n| fieldsFlatten data\n| fieldsAdd \"data.*\"\n| fieldsAdd data.account_name=if(isNotNull(data.accountName),data.accountName,else:data.account_name)\n| fieldsAdd data.account_id=if(isNotNull(data.accountId),data.accountId,else:data.account_id)\n// end parse content for data\n\n| fields timestamp, content, data.gen, data.app, data.user, data.environment\n\n//---------FILL IN TENANT HERE------------//\n| filter data.environment == $TenantID\n\n// use this line if you have more tenants: | filter in(data.environment, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n\n\n| summarize users = countDistinct(data.user), by:{data.gen}\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"pieChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"data.gen","valueAxis":"users","categoryAxisLabel":"data.gen","valueAxisLabel":"users"}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"error","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"data.gen\"]":264.84375,"[\"users\"]":166.203125}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"users"},"displayedFields":["data.gen"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"users","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"1":{"type":"data","title":"Daily App usage of dashboards, notebooks and workflows","query":"fetch logs, scanLimitGBytes:-1\n\n// filter for what's needed\n| filter dt.system.bucket == \"custom_sen_low_frontend_adoptiondata_ui_logs\" or dt.system.bucket == \"custom_sen_low_frontend_clientlogger_ui_logs\"\n| filterOut log.source == \"/media/datastore/server-data/log/Server_Debug.#.#.log\"\n// end filter for what's needed\n\n//parse content for data\n| parse content, \"LD? 'server.server.data.tenantData.serverLog.feature.ui.analytics.0.0.log:' SPACE LD '{}], {\\\"log\\\"=>\\\"' LD:message '\\\"}]'\"\n| parse content, \"'Server.0.0.log'? SPACE? JSON?:log_message SPACE? 'Server.0.0.log' SPACE JSON:real_message\"\n| fieldsAdd message = if(isNotNull(message),then:message,else:if(isNotNull(real_message[message]),then:real_message[message],else:content))\n| parse message, \"DATA? ('App opened (hypothetical)'|'App opened ')? LD? JSON:data LD?\"\n| filter isNotNull(data) and toString(data) != toString(record()) \n| fieldsRemove \"data.*\"\n| fieldsFlatten data\n| fieldsAdd \"data.*\"\n| fieldsAdd data.account_name=if(isNotNull(data.accountName),data.accountName,else:data.account_name)\n| fieldsAdd data.account_id=if(isNotNull(data.accountId),data.accountId,else:data.account_id)\n// end parse content for data\n\n| fields timestamp, data.app, data.user, data.environment, data.gen, data.user_type, data.dps, data.license, data.account_id, data.account_name, content\n| filter data.gen == \"3\"\n\n//---------FILL IN TENANT HERE------------//\n| filter data.environment == $TenantID\n\n// use this line if you have more tenants: | filter in(data.environment, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n\n| filter in(data.app, {\"dynatrace.dashboards\", \"dynatrace.notebooks\", \"dynatrace.automations\"})\n\n| summarize countDistinct(data.user), by: {bin(timestamp, 1d), data.app}\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"data.app","valueAxis":"countDistinct(data.user)","categoryAxisLabel":"data.app","valueAxisLabel":"countDistinct(data.user)"},"fieldMapping":{"timestamp":"bin(timestamp, 1d)","leftAxisValues":["countDistinct(data.user)"],"leftAxisDimensions":["data.app"]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"timestamp","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"countDistinct(data.user)"},"displayedFields":["data.app"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"countDistinct(data.user)","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"2":{"type":"data","title":"Users using dashboards, notebooks and workflows","query":"fetch logs, scanLimitGBytes:-1\n\n// filter for what's needed\n| filter dt.system.bucket == \"custom_sen_low_frontend_adoptiondata_ui_logs\" or dt.system.bucket == \"custom_sen_low_frontend_clientlogger_ui_logs\"\n| filterOut log.source == \"/media/datastore/server-data/log/Server_Debug.#.#.log\"\n// end filter for what's needed\n\n//parse content for data\n| parse content, \"LD? 'server.server.data.tenantData.serverLog.feature.ui.analytics.0.0.log:' SPACE LD '{}], {\\\"log\\\"=>\\\"' LD:message '\\\"}]'\"\n| parse content, \"'Server.0.0.log'? SPACE? JSON?:log_message SPACE? 'Server.0.0.log' SPACE JSON:real_message\"\n| fieldsAdd message = if(isNotNull(message),then:message,else:if(isNotNull(real_message[message]),then:real_message[message],else:content))\n| parse message, \"DATA? ('App opened (hypothetical)'|'App opened ')? LD? JSON:data LD?\"\n| filter isNotNull(data) and toString(data) != toString(record()) \n| fieldsRemove \"data.*\"\n| fieldsFlatten data\n| fieldsAdd \"data.*\"\n| fieldsAdd data.account_name=if(isNotNull(data.accountName),data.accountName,else:data.account_name)\n| fieldsAdd data.account_id=if(isNotNull(data.accountId),data.accountId,else:data.account_id)\n// end parse content for data\n\n| fields timestamp, content, data.gen, data.app, data.user, data.environment\n\n\n//---------FILL IN TENANT HERE------------//\n| filter data.environment == $TenantID\n\n// use this line if you have more tenants: | filter in(data.environment, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n\n\n| filter  data.app==\"dynatrace.dashboards\" or data.app==\"dynatrace.notebooks\" or data.app==\"dynatrace.automations\"\n\n| summarize usedapps=collectDistinct(data.app),by:{data.user} //which app does a user use?\n| summarize total_users_using_platform_apps = countIf(arraySize(usedapps)>=1),\n            oneapp = countIf(arraySize(usedapps)==1),\n            twoapps = countIf(arraySize(usedapps)==2),\n            allthreeapps = countIf(arraySize(usedapps)==3), \n            \n            dashboards = countIf(in(usedapps,\"dynatrace.dashboards\")),\n            notebooks = countIf(in(usedapps,\"dynatrace.notebooks\")),\n            workflows = countIf(in(usedapps,\"dynatrace.automations\"))\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"data.app","valueAxisLabel":"countDistinct(data.user)"},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"timestamp","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"total_users_using_platform_apps"},"displayedFields":[null],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"total_users_using_platform_apps","rangeAxis":""},{"valueAxis":"oneapp","rangeAxis":""},{"valueAxis":"twoapps","rangeAxis":""},{"valueAxis":"allthreeapps","rangeAxis":""},{"valueAxis":"dashboards","rangeAxis":""},{"valueAxis":"notebooks","rangeAxis":""},{"valueAxis":"workflows","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"3":{"type":"data","title":"3rd gen app usage (incl. wrapped) ","query":"fetch logs, scanLimitGBytes:-1\n\n// filter for what's needed\n| filter dt.system.bucket == \"custom_sen_low_frontend_adoptiondata_ui_logs\" or dt.system.bucket == \"custom_sen_low_frontend_clientlogger_ui_logs\"\n| filterOut log.source == \"/media/datastore/server-data/log/Server_Debug.#.#.log\"\n// end filter for what's needed\n\n//parse content for data\n| parse content, \"LD? 'server.server.data.tenantData.serverLog.feature.ui.analytics.0.0.log:' SPACE LD '{}], {\\\"log\\\"=>\\\"' LD:message '\\\"}]'\"\n| parse content, \"'Server.0.0.log'? SPACE? JSON?:log_message SPACE? 'Server.0.0.log' SPACE JSON:real_message\"\n| fieldsAdd message = if(isNotNull(message),then:message,else:if(isNotNull(real_message[message]),then:real_message[message],else:content))\n| parse message, \"DATA? ('App opened (hypothetical)'|'App opened ')? LD? JSON:data LD?\"\n| filter isNotNull(data) and toString(data) != toString(record()) \n| fieldsRemove \"data.*\"\n| fieldsFlatten data\n| fieldsAdd \"data.*\"\n| fieldsAdd data.account_name=if(isNotNull(data.accountName),data.accountName,else:data.account_name)\n| fieldsAdd data.account_id=if(isNotNull(data.accountId),data.accountId,else:data.account_id)\n// end parse content for data\n| fields timestamp, content, data.gen, data.app, data.user, data.environment\n\n\n//---------FILL IN TENANT HERE------------//\n| filter data.environment == $TenantID\n\n// use this line if you have more tenants: | filter in(data.environment, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n\n\n| filter startsWith(data.app, \"dynatrace\")\n| filterOut data.app == \"dynatrace.appshell\"\n| filterOut data.app == \"dynatrace.launcher\"\n| filter data.gen == \"3\"\n\n| summarize users = countDistinct(data.user), by:{data.app}\n| sort users desc","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"data.app","categoryAxisLabel":"data.app","valueAxis":"users","valueAxisLabel":"users"}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"data.app","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"users"},"displayedFields":["data.app"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"users","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"4":{"type":"data","title":"Number of active notebooks and dashboards (any user has accessed or worked on)","query":"fetch events\n| filter dt.system.bucket == \"strato_ui_events\"\n| filter in(bhv.app.id, {\"dynatrace.notebooks\", \"dynatrace.dashboards\"})\n\n//---------FILL IN TENANT HERE------------//\n| filter bhv.tenant.uuid == $TenantID\n\n// use this line if you have more tenants: | filter in(bhv.tenant.uuid, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n| fields  bhv.app.name, bhv.page.uri\n\n| parse `bhv.page.uri`, \"\"\"LD \"notebook/\" LD:notebook_id ('#'|EOF)\"\"\"\n| parse `bhv.page.uri`, \"\"\"LD \"dashboard/\" LD:dashboard_id ('#'|EOF)\"\"\"\n\n\n| fields  app = bhv.app.name, bhv.page.uri, notebook_id, dashboard_id\n\n| summarize active_notebooks=countDistinct(notebook_id),\n            active_dashboards=countDistinct(dashboard_id)","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"bhv.app.name","valueAxisLabel":"bhv.window.height"},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"active_notebooks","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{"[\"bhv.page.uri\"]":937,"[\"active_notebooks\"]":332}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"active_notebooks"},"displayedFields":[null],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"active_notebooks","rangeAxis":""},{"valueAxis":"active_dashboards","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"5":{"type":"data","title":"Datatype query executions","query":"//queries\nfetch logs, scanLimitGBytes:-1\n| filter dt.system.bucket==\"custom_sen_low_query_frontend_dql_logs\"\n| fields timestamp, content, dt.entity.host\n| parse content ,\"TIMESTAMP('yyyy-MM-dd HH:mm:ss.S'):ts LD:level LD:pre 'JSON:'JSON:query\"\n| filterOut isNull(query)\n| fields timestamp,content, query,user=query[user], qstring = query[dql], tenant = query[tenant], state = query[state], app=query[client.application_context], source=query[client.source], pattern = query[dql_commands], duration = query[duration_ms],waittime=query[wait_time], parsetime=query[exec_states_ms][parsing], segments = query[segments_scanned],scanned_bytes=query[scanned_bytes], start=query[analysis_timeframe_start], end=query[analysis_timeframe_end]\n| fieldsAdd query_duration_h = (end-start)*1.0/3600000, queue_time = query[qgw][query_queue_time], dur=query[duration_ms], query, buckets = query[buckets]\n| fieldsAdd datatype = coalesce(if(contains(pattern,\"timeseries\"),\"metric\"),\n            if(contains(pattern,\"fetch logs\"),\"logs\"),\n            if(contains(pattern,\"fetch spans\"),\"spans\"),\n            if(contains(pattern,\"fetch bizevents\"),\"bizevents\"),\n            if(contains(pattern,\"fetch events\"),\"events\"),\n            if(contains(pattern,\"fetch dt.davis.problems\"),\"problems\")\n)\n\n//---------FILL IN TENANT HERE------------//\n| filter tenant == $TenantID\n\n// use this line if you have more tenants: | filter in(tenant, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n| filter isNotNull(datatype)\n| summarize executions=count(), by:{datatype}\n| sort executions desc","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":"datatype","valueAxis":"executions","categoryAxisLabel":"datatype","valueAxisLabel":"executions"}},"singleValue":{"alignment":"center","label":"","recordField":"error","autoscale":true},"table":{"hiddenColumns":[],"lineWrapIds":[]},"honeycomb":{"shape":"hexagon","dataMappings":{"value":"executions"},"legend":"auto","displayedFields":["datatype"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"executions","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"6":{"type":"data","title":"Datatype query executions per app","query":"//queries\nfetch logs, scanLimitGBytes:-1\n| filter dt.system.bucket==\"custom_sen_low_query_frontend_dql_logs\"\n| fields timestamp, content, dt.entity.host\n| parse content ,\"TIMESTAMP('yyyy-MM-dd HH:mm:ss.S'):ts LD:level LD:pre 'JSON:'JSON:query\"\n| filterOut isNull(query)\n| fields timestamp,content, query,user=query[user], qstring = query[dql], tenant = query[tenant], state = query[state], app=query[client.application_context], source=query[client.source], pattern = query[dql_commands], duration = query[duration_ms],waittime=query[wait_time], parsetime=query[exec_states_ms][parsing], segments = query[segments_scanned],scanned_bytes=query[scanned_bytes], start=query[analysis_timeframe_start], end=query[analysis_timeframe_end]\n| fieldsAdd query_duration_h = (end-start)*1.0/3600000, queue_time = query[qgw][query_queue_time], dur=query[duration_ms], query, buckets = query[buckets]\n| fieldsAdd datatype = coalesce(if(contains(pattern,\"timeseries\"),\"metric\"),\n            if(contains(pattern,\"fetch logs\"),\"logs\"),\n            if(contains(pattern,\"fetch spans\"),\"spans\"),\n            if(contains(pattern,\"fetch bizevents\"),\"bizevents\"),\n            if(contains(pattern,\"fetch events\"),\"events\"),\n            if(contains(pattern,\"fetch dt.davis.problems\"),\"problems\")\n)\n\n//---------FILL IN TENANT HERE------------//\n| filter tenant == $TenantID\n\n// use this line if you have more tenants: | filter in(tenant, {\"tenant1\", \"tenant2\", \"tenant3\"})\n\n| filter isNotNull(datatype)\n| filter isNotNull(app)\n\n| summarize executions=count(), by:{app, datatype}\n| sort executions desc","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","categoricalBarChartSettings":{"categoryAxis":"app","valueAxis":"executions","categoryAxisLabel":"app","valueAxisLabel":"executions"}},"singleValue":{"alignment":"center","label":"","recordField":"error","autoscale":true},"table":{"hiddenColumns":[],"lineWrapIds":[]},"honeycomb":{"shape":"hexagon","dataMappings":{"value":"executions"},"legend":"auto","displayedFields":["app"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"executions","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},"layouts":{"0":{"x":0,"y":0,"w":10,"h":6},"1":{"x":10,"y":0,"w":10,"h":6},"2":{"x":0,"y":6,"w":20,"h":2},"3":{"x":0,"y":8,"w":10,"h":9},"4":{"x":0,"y":17,"w":10,"h":3},"5":{"x":10,"y":17,"w":10,"h":5},"6":{"x":10,"y":8,"w":10,"h":9}},"importedWithCode":false}